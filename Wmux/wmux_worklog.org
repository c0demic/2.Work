#+TITLE: wmux worklog
#+AUTHOR: Lixin Yu
#+OPTIONS: ^:nil
#+LATEX: \newpage

* 20170503
** magit					  :auxiliaryWork:emacs:magit:
Manage to use magit in emacs to accelerate the speed of orgnizing my worklog
** wmux								  :idea:wmux:
The wmux is short for Web mux, kind of feeling like tmux. It means I hope the web can be split into several different workspace as user expects.
** DONE add account					    :cluster:account:
The account can not be added because my account on datacenter is not in the sudoers file and i can't run cmgui.
- I add 2 accounts:
  - dominik schleicher: pwd: 123456
  - jinhua he: pwd: 123456
The users will be the one who will make simulations on the cluster.
** TODO lustre file not mounted				    :cluster:problem:
   SCHEDULED: <2017-05-03 Wed>
* 20170504
* 20170505
** structure of build tool chain of firefly			      :tools:
I figure out how the gradle works with nodejs and how nodejs organize the frontend js files
*** how gradle works					       :gradle:tools:
Gradle are organized through build.gradle file. In build.gradle file, you can use plugins and add library as you need. 
The most import plugin of nodejs in gradle is gradle-node-plugin. 
The plugin can be used by adding the following line to the build.gradle file:
#+BEGIN_SRC gradle
plugins{
    id "com.moowork.node" version "1.1.1"
}

apply plugins: 'com.moowork.node'
#+END_SRC
**** In Intellij Idea, if you add the above contents to the default build.gradle file. It will complain that the plugins{} is wrong and only plugins{} or script{} can be added before plugins{}. 
Solution: delete the first line of comments will solve the problem
**** The comments in gradle file
- //
- /* ... */
*** how nodejs works					       :nodejs:tools:
If you want to use react and redux things like that, you should understand how they are transformed into the final bundle.js file.
You write javascript file using JSX format, then you need babel to use .babelrc configuration file to transform the JSX file into some other form of standard javascript language:
(babel) JSX------>Standard javascript
The standard javascript file will then be bundled by webpack using webpack.config.js file
(webpack) Javascript ------> bundle.js
* 20170506
** communication
Javascript can communicate with java using websocket or socket.io
nodejs can communication with java using redis(pub/sub)
** structure of wmux
We can use both nodejs and java as backend together with the help of redis or something like that or we can use java as backend and communicate with javascript using websocket as firefly does.
** package.json
The most important part is the package name and version. The yarn and npm will write in the same package.json file without knowing each other in different way.
** npm vs yarn					      :nodejs:npm:yarn:tools:
The yarn is faster, I know nothing more.
*** install
yarn add <package> [ ||--dev]
npm install [-g] <package>  --save||--save-dev
yarn add <package> ~ n
** webpack					       :nodejs:webpack:tools:
Webpack is a tool to reorganize the js file based on dependency relationship of js file.
Usually each page can have only one entrance js file, but you can add more entrance js file using multiple entrypoint file. It is relativly complex.
See the [[https://webpack.github.io/docs/multiple-entry-points.html][webpack multiple-entry-points link]].

* 20170507
I build up the whole work place for wmux which include:
- gradle
- webpack
- babel
- react
- redux
* 20170508
** babel-loader find directory recursively 	      :problem:babel:webpack:
By inspecting the webpage using toggle tools, I found that the jsx file in subdirectory is also compiled and integrated into bundle.js.
The problem is how to use css to modify the component.
** CSS							       :css:ui:react:
The css can be defined in each jsx file and i think this is reasonable because according to definition of css, it is assumed to work as cascade structure and thus making it in the very lower level would overwrite the upper level css specification and it is very rational.
** Pictures: file-loader			   :file-loader:loader:react:
The file loader is a good thing to display picture on web which is better than image-webpack-plugin that suffers some strange problem related with ENOENT or something it depends on.
One notation is to notice that the file-loader should set the name of the output file including the directory path. The relative path is relative to the public path of the output parameter of webpack and the public path is a relative path to the path that the output file specified.
** TODO The multi-entry problem 
 
* 20170509
** CSS							       :css:ui:react:
The following link may be a guide:
[[andrewhfarmer.com/how-to-style-react/][react-style-guide]]
According to this guide, SCSS + autoprefixer [+ BEM] should be okay for me.
But as I feel if I can make the css style inline with react would be very helpful, I would like to choose a inline css plugin and that is radium besides material-ui library will also be used.
** ES7								 :future:ES7:
ES7 adds decoration in  it and you need babel-plugin-syntax-decorators to be compatible with it and you need to modify the .babelrc into the following:
#+BEGIN_SRC
{
    "presets": ["es2015", "react"],
    "plugins": ["transform-class-properties",
                "syntax-decorators"
               ]
}
#+END_SRC
** packages installed
*** overlist
['babel-plugin-transform-es2015-classes','babel-plugin-transform-decorators-legacy','radium','prop-types','babel-plugin-syntax-decorators', 'path','mozjpeg','pngquant','url-loader','img-loader','material-ui','paper','image-webpack-loader','file-loader', 'react', 'jsx', 'react-dom', 'redux','babel-cli', 'babel-loader', 'babel-core', 'babel-preset-es2015','babel-preset-es2017', 'babel-preset-react','babel-preset-stage-0','babel-preset-stage-1','babel-preset-stage-2', 'webpack', '--dev']
*** prop-types 						   :package:comments:
I install the package because the react complains that the accessing propTypes via react is deprecated in react v15.5 and later, you need to use prop-types package instead.
The warning will be display even you don't call proptypes in the react code, because you may call it independently.
*** babel-preset-2017
Js evolved very fast, the es2017 provide a lot of new features and I need to embrace it ASAP.
Feature like new way to initial class is more concise than that in es6 and es5.
*** babel-plugin-transform-decorators-legacy
This is kind of an official plugin for decorators, because decorators is new feature in es2017 not in es2015.
*** radium						   :CSS:radium:react:
This is the inline css plugin I will use and because I choose inline css plugin, so I can't and don't have to choose other type of css plugin like SCSS or BEM or any other non-inline css plugins.
radium will be unmounted because it is replaced by aphrodite and css_module plugins plus a method called [[ITCSS]].
*** babel-plugin-transform-es2015-classes
The plugin is used to solve the problem that the class should declare constructor with new which Radium doesn't do it this way.

*** material-ui
This is a very powerful ui plugin I will use and it will save me time in design plugins.
*** paper 
This is needed by material at least some components in material.
*** img-loader, mozjpeg, pngquant, image-webpack-loader
These are removed form package list because they are replaced by file-loader. At the very beginning, they are supposed to provide the function to show images on the web but they failed.
*** 
** webpack							    :webpack:
In webpack config file webpack.config.js, you can't use both "query" and "options", query is deprecated and you should use options only.

** package.json
in the last, there is code like this:
#+BEGIN_SRC json

"scripts": {
    "build": "webpack"
  },

"babel": {
    "presets": [
      "es2015"
    ]
  }
#+END_SRC
The scripts part can not be removed because the webpack will have to read it. But the babel part is not necessary for webpack and should be able to be removed easily.
** what I learn today by now
*** es2017
es2017 has a better feature in setting the constructor of a class but radium can not use it.
*** webpack.config.js
The config file should only use "options" as a key parameter, at least you can't use "options" with "query" together, that will cause the problem of webpack process.
*** inline CSS
As I believe it is most suitable to use CSS in the component, I think use inline CSS is a wise choise and I would use Radium to do the job.
*** material-ui
The material-ui is a class of gui thing which is carefully designed and should save a lot of time in building the website.
*** IIFE
IIFE will have great influence on the conditionals in JSX. See this link[[http://stackoverflow.com/questions/8228281/what-is-the-function-construct-in-javascript][IIFE]]. 
** TODO draw the framwork of the ideal website and at least realize the first edition before end of tomorrow.
* 20170510
** CSS					    :css:aphrodite:css_module:ITTCSS:
I met a lot of problem in radium and when I try to figure out the problem of inline css with SASS I found aphrodite. There is a good [[https://medium.com/maintainable-react-apps/journey-to-enjoyable-maintainable-styling-with-react-itcss-and-css-in-js-632cfa9c70d6][article]] talking about the css best practice. So I decide to change to this best practice.
*** aphrodite
*** css_module
*** <<ITCSS>>
ITCSS is inversed trangle CSS. It is not a framework nor a software, it is a principle by which the developers should follow in order to keep your css scalable, terse, logical and managable.
*** material-ui							:material_ui:
material-ui may use BEM principle which require you to name the components with PascalCamel rules.
*** loader		       :loader:webpack:config:js_loader:babel_loader:
To load the jsx file, you might need jsx-loader, but it is not for sure, I suspect you don't need that, but if you use it, put it before babel-loader.
*** less-loader
When you use css, some plugins might have less inside it so you need to install less-loader to load less file.
You might also have chance to meeet other requirement which you will have to meet them according to webpack error report.

* 20170511
** groupmeeting
No much progress made and they want to make more changes on both hardware and software. We need to decide it later.
*** move one computing node to provide service
*** change to HDFS
*** change BCM to free software
** talk with chunhui
Progress is not quick enough. I may have to put more attention on it.
** fix path problem
The resolve.root method is deprecated and I use resolve.alias to give the absolute path of the app root directory.
** use import instead of var=require
The import method is imported to ES6 recently and it is advanced than require method which is used in commonJS.
* 20170515
** react route is able to change the current page without refresh the page
** the structure of the web is clear when I was in Gerado's office
** CSS related
*** put div on right side of page
See the link [[http://stackoverflow.com/questions/5222523/position-a-div-container-on-the-right-side][positionOnRight]].

* 20170516
Works are updated on github, so here will miss something. Last week, I need to stay in office in cerro Calan. Efficiency is a little lower.
** summary of knowledge of react redirect
- browserHistory can and can only be imported by history package, react-router v4 doesn't provide it.
- history push will have a "#" in front of the path desired.
- browserHistory.push might no be able to use, it complains that the _history.browserHistory is undefined.
- window.location.href="</path/to/dir.html>"
  - remember that the </path/to/dir.html>:
    - if it begins with a slash "/", it is the absolute path relative to the website root URL;
    - if it begins without a slash "/", it is relative to the current URL. This is dangerous because you may find it hard to use the relative path, it can easily got you into trouble because you are not in the URL that supposed to be.
  - you may find that using varible in window.location is very convenient when bundled with search bar. You can find some information from [[http://stackoverflow.com/questions/28250103/react-how-to-navigate-via-clickhandlers][here]]. 
- transition is used only for internal URL. If you want to transfer to other domain use window.location or <a href=''>
- Even if you can declare: 
#+BEGIN_SRC
contextTypes:{
  router: React.PropTypes.object
}
#+END_SRC
without problem, you still cannot use this.context.router.push('<url>'), the browser will complain context.router is undefined
- ??figure out Redict usage
- context.router exists only in react-router v>2 rc2 or v<1 rc3
* 20170517
** redux review

*** action
- action are plain js object;
- action creator is a plain function that return action
**** dispatch
Dispatch is a function that dispatch a function, it can take parameter to complete the action, but finally it is just a plain function.
**** bindActionCreators
A function that bind several actions creators with one dispatcher

*** Reducer
A function tell what state should be returned when a action is dispatched.
**** Reducer Decomposition
You need to decompose the reducer into small part that make the maintainance easy. The main reducer need to call the decomposed reducer in the routine.
***** combineReducers
After you decompose the reducer into small part, you may combine them into one reducer using combineReducers function.
****** key in combineReducers
You can assign a key to combineReducers and each reducer only deal with the slice of state defined by the key. e.g.:
#+BEGIN_SRC
const reducer = combineReducers({
  a: doSomethingWithA,
  b: processB,
  c: c
})
#+END_SRC
which equals: 
#+BEGIN_SRC
function reducer(state = {}, action) {
  return {
    a: doSomethingWithA(state.a, action),
    b: processB(state.b, action),
    c: c(state.c, action)
  }
}
#+END_SRC
** react-redux flow deepin
The whole story is very tricky and only practice and reading the code can make you really understand them, but the flow is much more clearer this time:
*** state
The state that will show on the page.
*** action							      :redux:
Indicate what you want to do with the state.
*** reducer							      :redux:
The only way to change the state.
*** combine reducers
You can and should decompose the reducer into small ones, and then use combineReducers function to combine them all into one single reducer.
*** REACT UI						  :react:react_redux:
**** presentational component
Only show what you can see
**** container component
How the presentational component work
*** store						  :redux:react_redux:
Store is a thing that you can generate by calling createStore(rootReducer).
*** connect						  :react_redux:redux:
Connect is a function that connect the state and dispatch with props of component.
*** provider						  :react_redux:redux:
Provider can provide the reducer to the component, and then the reducer can change the state. After the state is changed into a new one, the state will be updated and the props will be updated and the page will refresh.
*** subscribe
    Subscribe is a function that can make the listener know that state has changed and the listener will be called at the moment the state is refreshed.
* 20170518
** multiple entry for webpack
This is a key point for webpack to support multiple application and has to be solved completely.
*** multiple entry
You can specify multiple entry in webpack.config.js and put them in the javascript object.
#+BEGIN_SRC
entry: {
    <name1>:<path1>
    , [name2:<path2>
    , ...]
},
output: {
    path:<output file path>,
    filename: "[name].<bundle.js like file name>"
    publicPath: <public path for page or something like that>
},
plugins: [name of plugin you use, pay attention ,this is confusing, the name is the name you give them, not the package name of the webpack!!]
#+END_SRC
*** commonPlugin
In webpack v2, commonPlugin only takes one parameter, so you need to make all parameter in an javascript object. The form will look as follows:
#+BEGIN_SRC
let commonPlugin = new webpack.optimize.CommonChunkPlugin({
    name: "<whatever>"
    filename: '<output_js_file_name_ends_with .js>'
})
#+END_SRC
You will need commonplugin that would solve some problem when the same module are used by multiple applications.
Remember that commonPlugin is only used if you know which js file are common parts.

** TODO test provide unnessary props to components	:props:react:problem:
Given a function more parameter than its definition has no effects but the first argument could not be wrong. It is not the whole, because I suspect that if the first argument is wrong, it could be ignored safely by some mechanism like what the react tutorial do in Todo component.
** redux deepin
This is really a deep hole!
*** State
State is encapsulated, which means you should not specify the shape of state individually, you should make them distributed in the reducer which are responsible for them. You may get more information from [[http://stackoverflow.com/questions/33749759/read-stores-initial-state-in-redux-reducer/33791942#33791942][here]].
* 20170519
** webpack grammer trap						    :webpack:
In webpack, if you want to use jsx as a entry point it is okay, but you must not add the following source code into your webpack.config.js file:
#+BEGIN_SRC
externals: {
        'react': 'React'
    },
#+END_SRC
THIS IS TOTALLY WRONG!!!!
This told webpack don't bundle the react as this [[http://stackoverflow.com/questions/40312468/uncaught-referenceerror-react-is-not-defined-webpack][link]] told the truth!!!
#+BEGIN_QUOTE
This will exclude it from the bundle which would cause the error OP is seeing. This tells Webpack not to bundle React, but to expect that React will be available globally
#+END_QUOTE

The grammer bewteen webpack v2 has a lot of differences with webpack v1!!!!

** Important
All component should be named with a capital letter!!!!!! "Man" will work but "man" is nothing!!!!!!



* 20170522
** Breakthrough
After the weekends, I finally work the problem out that now I can make the page interact with my input which means I can now input some information and get feedback from the page.
*** Structure
The structure looks as follows:
- Actions: like redux says, it is breadcumb to indicate what you are going to do to the state;
- Reducer: The only way to change state;
- Component: The presentational part which doesn't care where the data is from or handle functions;
- Container: The part that provide the props and state as props to the component it wraps.In container, there are 2 key functions: mapStateToProps and mapDispatchToProps.
  - These 2 function are used to provide props and state as props to the component.

*** ref
- You can use ref to pass props to any deep level of components.
- ref can only be used in DOM or class, you CAN NOT use it in functional component as it has no instance that can call <<ref>>. You need to read this [[https://facebook.github.io/react/docs/refs-and-the-dom.html][article]], it is very clear.
*** controlled and uncontrolled component
For some component, they have their own property like input or select something like that in html. It is better if you can take care of the data flow using js instead of the default behavior, using this method the component is called controlled component. Using [[ref]] is called uncontrolled component.
*** PropTypes
The list of PropTypes is a object with the prop name and a function which return a bool value,the function is to check if the requirement can be met, so you can write the function by yourself, you can see this [[http://stackoverflow.com/questions/33278862/reactjs-component-proptypes-specify-a-function-type-with-a-set-number-paramete][article]].
 
* 20170523
** javascript
Spend some time in learning javascript and the communication between client and server.
Websocket is kind of an update of http and it use http for the first time communication and then using only wss protocol to communicate with each other.
* 20170524
** websocket
Establishing a connection using websocket is relatively easy but the java end is not that easy.
*** structure of websocket in client end
using a file to establish a connection and then include the client in all the script that will use it.
** java
The java server on the server end should be glass which is better than tomcat. Glassfish is a fully functional java EE server and tomcat is only a webcontainer for holding jsp, so I choose glassfish.
*** glassfish
glassfish v3 is no longer usable, use v4, nowadays, the version is v4.1.1 .The application directory is under domain folder with name application, you need to extract war ball to that directory. As far as I know, no war file keep its ball when deploying to the server.
**** intellij integration			  :intellij:gradle:glassfish:
Intellij has plugin for glassfish, and enable it you can get the support from it. The integration between these 2 is not good enough and needs a lot of work to do to get it work, do I need to change to netbeans or eclipse?
The intellij can not directly bind gradle and javaEE together but you can make it manually.
** STATUS
now the problem is in the java side, I figure out how to configure out the deployment but don't understand the concept of endpoint which is important. The connection between client and server can be connected but not stable, I need to know why and fix it.
*** TODO Endpoint						       :java:
** TODO Try to establish a connection between client and server with database
* 20170529
** websocket
Making the javascript can communicate with java backend using websocket. From tomorrow, I need to build the whole website as a whole and this would be the combination of all things I had learned.
*** some point
websocket need the foldname to the websocket endpoint, it is hard to explain clearly, better with an example.
#+BEGIN_SRC javascript
var websocket = new WebSocket("ws://localhost:8080/<folder name>/<entry_point_name>");
#+END_SRC
The folder name is the name of the war ball!!!
#+BEGIN_SRC java
@ServerEndpoint("<entry_point_name>")
#+END_SRC
** TODO combining all together.
Java is very easy to use for operating the database, no matter what kind of database, the rest thing is to build all the things together and provide service for astronomers.
*** Database install
*** CSS adjust
*** new URL generation
** java
*** global
method: public static
varible: public static final
*** jar
    Actually this is a pkzip file and you can include a "manifest" file in it which is used to specify the class that has main method to run.
* 20170530
** directory structure
The directory structure is determined. Making each subject a single page.
** follwo redux standard using duck rule
See the [[https://github.com/erikras/ducks-modular-redux][link]].

* 20170531
** react-router history		     :react:react_router:router:history:core:
history is a core concept and it can be divided roughly into 3 parts:
- browserHistory
  - The browserHistory is the one you should use for product environment and it generate a real URL like http://domainname/path/to/url. !BUT! this needs to be cooperate with server side render like nginx or apache httpd, or you may not be able to come back.
- hashHistory
  - It generate url like http://yourdomainname/#/path/to/url. You should not use that, because it is not simple, clean and some browser doesn't support it.
- memoryHistory
  - It will not change URL at all. 

* 20170601
** glassfish							  :glassfish:
*** deployment							 :deployment:
To use intellij idea with glassfish, I need to deploy it and the easiest way is to use the plugin integrated in idea IDE to deploy the 
** idea
- closing a project:
  | file | close project |

- setting of integration with glassfish:
Run | Edit Configurations | /help/img/idea/2017.1/new.png | GlassFish Server | Local or Remote

See the [[https://www.jetbrains.com/help/idea/2017.1/run-debug-configuration-glassfish-server.html][link]] below.
* 20170602
** mainbody
framework of mainbody but need to be designed, I think maybe I need to make a demo first and then make it better.
** store
createStore needs a function as parameter, you can't use createStore() giving it a empty parameter, it will complain errors.
** javascript							     :export:
export {<name>} from <package> != export <name> from <package>
These 2 cannot be changed with each other.
*** named export
export {<name>}
*** unnamed export
export <name>
* 20170603
** jdbc
- figure out how jdbc connect with oracle database
You should see this [[http://blog.payara.fish/payara-server-basics-integrating-payara-server-with-oracle-11g-xe][link]]. the last part in localhost:1521:<ORACLE_SID>
But in my situiation, the name of oracle_SID is ORACLE_UNQNAME I havn't figure out what the relationship between but this is the result for now.
This is a big step in dealing with the database, and it will be easy for me to deal with other database like mysql and sqlite etc.
*** TODO xml configuration
I need to write the xml configuration file. 
** oracle
*** TODO ORACLE_SID vs ORACLE_UNQNAME??
    using oracle as a test database.
** redux
*** file rules:
- directory
  - webpack build dir: locate under the src/main/webapp folder;
  - app folder(<app-name>): locate under the src/main/webapp folder;
    - src
      - main
	- js
	  - action
	    - <action-name>A.jsx
	  - bundle
	    not sure if this will be used.
	  - component
	    - <component-name>.jsx
	  - containers
	    - <component-name>C.jsx
	  - reducer
	    - <reducer-name>F.jsx
	    - <combineReducers-name>R.jsx
	    - <store-name>S.jsx
	  - resources
	  - store
	    - <provider-name>P.js
	  - <app-name>.js
** glassfish to payara
I use payara as service provider because glassfish can not add jdbc successfully.
* 20170604
** make 4 pages
- home
- jupyter
- firefly
- dataquery
  - to show data from database using websocket and jdbc which was just built yesterday
** combineReducers
combineReducers must be given an object as parameter like below:
#+BEGIN_SRC
const <reducers-name>=combineReducers({<reducer, functions, list>});
#+END_SRC

** DONE websocket
   SCHEDULED: <2017-06-04 Sun> DEADLINE: <2017-06-05 Mon>
I had build a new websocket for the fully framework, the only problem happens at frontpage.js is the ActionHandler is not defined, while in firefly this function is related with reduxflux in src/firefly/js/core/messaging/messageHandlers.js file
I don't need to copy this file, I can make my own function to take place of that!
The progress is good, tomorrow I should be able to extract data from database.

* 20170605
** js arrow function
- basic grammer: (<parameter1>,<parameter2>...)=>{}
- to return a object (<parameter1>,<parameter2>...)=>({})
** TODO websocket queue
   SCHEDULED: <2017-06-05 Mon>
*** build websocket queue
    SCHEDULED: <2017-06-05 Mon>
* 20170606
** rpc vs rmi vs websocket
do a primier search on the 3 protocols and decide which one to use
* 20170607
** rpc over websocket
This is also a key component of the communication between client and server and is a high level protocol than websocket which communicate data using websocket. Figure the difference between rpc and rmi and websocket and also figure out the realization of rpc in firefly which can be a template for CASSACAVO.
*** how it is realized
It is very interesting that the client cut the http:// head from the url and add the sticky/cmdRsv varible to the rootURL obtained from function getRootURL and then send them through websocket protocol. Using this method, json data are transferred through web socket protocol.
**** jsonRequest
In charge of json data communication
**** fetchURL
A wrapper for fetch
**** fetch
A function realized in many browsers and used to communicate with server.
* 20170608
** ngas
Now we can build tables in mysql. Ngas can connect to mysql. A good progress!!!
File push and pull failed in test. This must be solved.
** website
*** problem
- focus area: alma or include others
this year we will only focus on alma, but the alma is considered as a module
- search catalog
  - fits
  - ms
** communication protocol
*** websocket
for long time(downloading data) or high frequency exchange of data or updates on time(like stock price or time)
*** rpc 
Solution: apache-turbine 
**** web service
It is a high level of rpc, the basis of web service is rpc.
***** SOAP and REST
SOAP: a old realization of web service using xml data
REST: a modern realization of web service using json data 
** json website
*** RESTFul

** spark
I would like to try to use spark to connect to the database

** websocket vs web service
- websocket: for long time exchange of data or updates on time(like stock price or time)
- web service: a http server response to SOAP/REST/JSON requests

* 20170609
** middleware
*** redux-thunk
*** redux-sage
I would choose redux-sage as it is still being developed actively, thunk hasn't been updated for 2 years.
** sparkjava
This is different from apache spark and has nothing to do with it.
I mistake it for apache spark which is designed to run cluster and distributed data.
*** scala
you need to install scala to run sparkjava framework
*** jndi connection
It seems that spark can not connect to database using jndi or you can use jetty maybe, you need search it.
** j2ee
it seems that j2ee is a standard that specify the api and so the other technical like spark or rest are just standarized plugin to j2ee so you may grab them and use them in j2ee framework easily. Don't worry too much about it.
** idea
*** annotation
settings|compiler|annotation
See the [[http://www.cnblogs.com/yjmyzz/p/lombok-with-intellij-idea.html][link]]
*** scope problem
There are 3 kind of scopes in gradle, but if you want to use them, you should use only compile scope and you can change other scope name into compile to get it worked.
- compile
- testCompile
- provided
* 20170610
** idea REST
See this [[https://www.jetbrains.com/help/idea/2017.1/creating-and-running-your-first-restful-web-service-on-glassfish-application-server.html#d76541e105][link]].
*** REST vs non-REST http
See the [[https://stackoverflow.com/questions/2191049/what-is-the-advantage-of-using-rest-instead-of-non-rest-http][link]].
- simple
- easy to expand
* 20170615
** TODO website
1. do a research on client needs
2. technical difficult on different parts
3. full stack introduction
